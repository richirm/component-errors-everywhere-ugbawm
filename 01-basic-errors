import {
    Component, 
    EventEmitter, 
    Input, 
    Output, 
    HostListener, 
    ElementRef,
    OnInit,
    Renderer2
} from 'angular/core';

import { MyService } from './services/my-service';
import { DataInterface } from './interfaces/Data.interface';

@Component({
    selector: 'invgate-my-component',
    templateUrl: './my-component.html',
    styleUrls: ['./my-component.scss']
})
export class MyComponent implements OnInit {

    @Input() label: string;
    @Output() onDelete: EventEmitter<string> = new EventEmitter();

    id: string;

    someData: DataInterface[];
    parsedData: DataInterface[];

    @HostListener('mouseenter') 
    onMouseOver() {
        this.changeStyle(this.el, 'border', '5px solid green');
    }

    constructor(
        private myService: MyService,
        private renderer: Renderer2,
        private el: ElementRef) {}

    ngOnInit() {
        this.resetValues();
        this.subscribeToData();
    }
    
    /**
     * Reset all fields to default value.
     */
    private resetValues() {
        if (!this.label) {
            this.label = 'Empty';
        }
    }

    /**
     * Subscription to receive data from another place of the application.
     */
    private subscribeToData() {
        this.myService.onSomeEvent.subscribe((data: DataInterface[]) => {
            this.someData = data;
            this.parsedData = this.processData(this.someData);
        });
    }

    /**
     * Transform the original data to a specific format.
     */
    private processData(originalData: DataInterface[]) {
        return originalData.map(oneData => {
          const clonedData = {...oneData};
          // Le pongo 2 decimales unicamente 
          clonedItem.quantity = parseFloat(clonedData.quantity.toFixed(2));
          return clonedData;
        });
    }

    // Suponemos que este metodo se ejecuta cuando en el html hacen click en un boton
    /**
     * When the button is clicked, it emits and updates the selected ID.
     */
    public clickDeleteButton(id: string) {
        this.onDelete.emit(id);
        this.updateIdWhenIsPossible(id);
    }
    
    /**
     * Update the id only when the selected id is a different value than the previous one.
     */
    private updateIdWhenIsPossible(id: string) {
        if (this.id !== id) {
            this.id = id;
            this.notififyIdChanges(id)
        }
    }

    private notififyIdChanges(id: string) {
        console.log(`Your ID has changed to: ${id}!`);
    }

    private changeStyle(element: ElementRef, property: string, value: string) {
        this.renderer.setStyle(element.nativeElement, property, value);
    }

}
